<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automata on x0r19x91&#39;s blog</title>
    <link>http://localhost:1313/categories/automata/</link>
    <description>Recent content in automata on x0r19x91&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/categories/automata/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Counting Strings - Part 2</title>
      <link>http://localhost:1313/post/counting-strings-2/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/counting-strings-2/</guid>
      <description>I strongly recommend you to read Part-1 before proceeding into this section.
Now, let&amp;rsquo;s define the same for regular expressions. And then the fun begins

 Given a Regular language \(R\), Minimal Regular Expression is the regular expression generated from the minimal DFA that accepts \(R\)
 For example:
Let \(R_0 = (a+b+ab)^\ast, R_1 = (a+b)^\ast \).
\(R_0\) is not Minimal since we have two distinct ways of accepting the string \(ab\).</description>
    </item>
    
    <item>
      <title>Counting Strings - Part 3</title>
      <link>http://localhost:1313/post/counting-strings-part-3/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/counting-strings-part-3/</guid>
      <description>I strongly recommend you to read Part-1 and Part-2 before proceeding into this section.
In this part, we will derive a general formula for solving linear recurrences.
 Find the recurrence for the number of strings generated by the regular expression \({\lparen a+bb+ccc \rparen}^\ast\)
 From Part-2, we have
$${\lbrack R^\ast \rbrack}_n = \begin{cases} {\lbrack R^\ast \rbrack}_{n-1} + {\lbrack R^\ast \rbrack}_{n-2} + {\lbrack R^\ast \rbrack}_{n-3} &amp;amp;\text{n} \geq 3 \\ 1 &amp;amp;\text{n = 0, 1} \\ 2 &amp;amp;\text{n = 2} \end{cases} \tag{eg.</description>
    </item>
    
    <item>
      <title>Counting Strings - Part 1</title>
      <link>http://localhost:1313/post/counting-strings-1/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/counting-strings-1/</guid>
      <description>One day, I was solving a recurrence problem from Kenneth Rosen&amp;rsquo;s Discrete Math book.
Question 1  Find the recurrence for the number of bitstrings of length n, containing no two consecutive zeros
 This is quite easy, right?
Let \(a_n\) be the number of strings of length n.
 If the string starts with \(1\), we have \(a_{n-1}\) choices since there&amp;rsquo;s no restriction. If the string starts with \(0\), we must have \(0\) after it, so \(a_{n-2}\) choices.</description>
    </item>
    
  </channel>
</rss>
